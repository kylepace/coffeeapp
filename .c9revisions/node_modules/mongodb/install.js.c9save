{"ts":1363130803640,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var spawn = require('child_process').spawn,\n  exec = require('child_process').exec;\n\nprocess.stdout.write(\"================================================================================\\n\");\nprocess.stdout.write(\"=                                                                              =\\n\");\nprocess.stdout.write(\"=  To install with C++ bson parser do <npm install mongodb --mongodb:native>   =\\n\");\nprocess.stdout.write(\"=                                                                              =\\n\");\nprocess.stdout.write(\"================================================================================\\n\");\n\n// Check if we want to build the native code\nvar build_native = process.env['npm_package_config_native'] != null ? process.env['npm_package_config_native'] : 'false';\nbuild_native = build_native == 'true' ? true : false;\n// If we are building the native bson extension ensure we use gmake if available\nif(build_native) {\n  // Check if we need to use gmake\n  exec('which gmake', function(err, stdout, stderr) {\n    // Set up spawn command\n    var make = null;\n    // No gmake build using make\n    if(err != null) {\n      make = spawn('make', ['total']);\n    } else {\n      make = spawn('gmake', ['total']);\n    }\n\n    // Execute spawn\n    make.stdout.on('data', function(data) {\n      process.stdout.write(data);\n    })\n\n    make.stderr.on('data', function(data) {\n      process.stdout.write(data);\n    })\n\n    make.on('exit', function(code) {\n      process.stdout.write('child process exited with code ' + code + \"\\n\");\n    })\n  });  \n}\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1564}]],"length":1564}
